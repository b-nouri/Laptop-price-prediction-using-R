model_list_min2 <- caretList(min_price~., data=maxPrice_Clean_Training, trControl=train.control, methodList=c("parRF", "gbm", "glmnet"))
set.seed(123) #For reproducibility
model_list_min2 <- caretList(min_price~., data=minPrice_Clean_Training2, trControl=train.control, methodList=c("parRF", "gbm", "glmnet"))
modelCor(resamples(model_list_min2))
gbm_ensemble_max <- caretStack(model_list_max, method="gbm", metric="MAE", trControl=train.control)
gbm_ensemble_min <- caretStack(model_list_min2, method="gbm", metric="MAE", trControl=train.control)
glm_ensemble_max <- caretStack(model_list_max, method="glmnet", metric="MAE", trControl=train.control)
glm_ensemble_min <- caretStack(model_list_min2, method="glmnet", metric="MAE", trControl=train.control)
lm_ensemble_max <- caretStack(model_list_max, method="lm", metric="MAE", trControl=train.control)
lm_ensemble_min <- caretStack(model_list_min2, method="lm", metric="MAE", trControl=train.control)
min(gbm_ensemble_max$error$MAE+gbm_ensemble_min$error$MAE)
min(glm_ensemble_max$error$MAE+glm_ensemble_min$error$MAE)
min(lm_ensemble_max$error$MAE+lm_ensemble_min$error$MAE)
bothmodels <- list(gbm_ensemble_min,gbm_ensemble_max)
pred <- data.frame(predict(bothmodels, Price_Test_max, type = "raw"))
names(pred2) <- c("MIN", "MAX")
results3 <- cbind(id_test, pred2)
results3
write.csv(results3, file = "Model 14 (GBM ensemble mean min max).csv", row.names = F)
bothmodels <- list(gbm_ensemble_min,gbm_ensemble_max)
pred2 <- data.frame(predict(bothmodels, Price_Test_max, type = "raw"))
names(pred2) <- c("MIN", "MAX")
results3 <- cbind(id_test, pred2)
results3
write.csv(results3, file = "Model 14 (GBM ensemble mean min max).csv", row.names = F)
bothmodels <- list(glm_ensemble_min,glm_ensemble_max)
pred2 <- data.frame(predict(bothmodels, Price_Test_max, type = "raw"))
names(pred2) <- c("MIN", "MAX")
results3 <- cbind(id_test, pred2)
results3
write.csv(results3, file = "Model 15 (GLM ensemble mean max).csv", row.names = F)
bothmodels <- list(lm_ensemble_min,lm_ensemble_max)
pred2 <- data.frame(predict(bothmodels, Price_Test_max, type = "raw"))
names(pred2) <- c("MIN", "MAX")
results3 <- cbind(id_test, pred2)
results3
write.csv(results3, file = "Model 16 (LM ensemble mean max).csv", row.names = F)
set.seed(123) #For reproducibility
#model_list_max <- caretList(max_price~., data=maxPrice_Clean_Training, trControl=train.control, methodList=c("parRF", "gbm", "glmnet"))
model_list_max <- caretList(max_price~., data=maxPrice_Clean_Training, trControl=train.control, methodList=c("parRF", "gbm"))
#set.seed(123) #For reproducibility
#model_list_min <- caretList(min_price~., data=minPrice_Clean_Training, trControl=train.control, methodList=c("parRF", "gbm", "glmnet"))
set.seed(123) #For reproducibility
#model_list_min2 <- caretList(min_price~., data=minPrice_Clean_Training2, trControl=train.control, methodList=c("parRF", "gbm", "glmnet"))
model_list_min2 <- caretList(min_price~., data=minPrice_Clean_Training2, trControl=train.control, methodList=c("parRF", "gbm"))
prf_ensemble_max <- caretStack(model_list_max, method="parRF", metric="MAE", trControl=train.control)
prf_ensemble_min <- caretStack(model_list_min2, method="parRF", metric="MAE", trControl=train.control)
min(prf_ensemble_max$error$MAE+prf_ensemble_min$error$MAE)
gbm_ensemble_max <- caretStack(model_list_max, method="gbm", metric="MAE", trControl=train.control)
gbm_ensemble_min <- caretStack(model_list_min2, method="gbm", metric="MAE", trControl=train.control)
min(gbm_ensemble_max$error$MAE+gbm_ensemble_min$error$MAE)
bt_ensemble_max <- caretStack(model_list_max, method="bstTree", metric="MAE", trControl=train.control)
bt_ensemble_min <- caretStack(model_list_min2, method="bstTree", metric="MAE", trControl=train.control)
min(bt_ensemble_max$error$MAE+bt_ensemble_min$error$MAE)
# --- PRF Ensemble mean max (parRF, GBM)-------------------
bothmodels <- list(prf_ensemble_min,prf_ensemble_max)
pred3 <- data.frame(predict(bothmodels, Price_Test_max, type = "raw"))
names(pred3) <- c("MIN", "MAX")
results4 <- cbind(id_test, pred3)
results4
write.csv(results4, file = "Model 17 (PRF ensemble (PRF and GBM) mean max).csv", row.names = F)
# --- GBM Ensemble mean max (parRF, GBM)-------------------
bothmodels <- list(gbm_ensemble_min,gbm_ensemble_max)
pred4 <- data.frame(predict(bothmodels, Price_Test_max, type = "raw"))
names(pred4) <- c("MIN", "MAX")
results5 <- cbind(id_test, pred4)
results5
write.csv(results5, file = "Model 18 (GBM ensemble (PRF and GBM) mean max).csv", row.names = F)
# --- BT Ensemble mean max (parRF, GBM)-------------------
bothmodels <- list(bt_ensemble_min,bt_ensemble_max)
pred5 <- data.frame(predict(bothmodels, Price_Test_max, type = "raw"))
names(pred5) <- c("MIN", "MAX")
results6 <- cbind(id_test, pred5)
results6
write.csv(results6, file = "Model 19 (BT ensemble (PRF and GBM) mean max).csv", row.names = F)
xyplot(resamples(model_list_max), models = c("parRF", "gbm"), metric = "MAE")
gg_miss_var(clean2)
gg_miss_case(clean2)
aggr(x=clean3_knn)
aggr(x=clean2)
pedict(model7_max)
predict(model7_max)
id_train <- clean6 %>% select(id)
train_max <- data.frame(predict(model7_max, type = "raw"))
c(id_train,train_max)
train_max <- data.frame(predict(model7_max, type = "raw"))
prueba <-c(id_train,train_max)
prueba[id==6685]
prueba[prueba$id==6685]
prueba
prueba[prueba$id==6685,]
prueba[id==6685]
names(prueba)
prueba[prueba$id==6685]
View(prueba)
prueba[prueba$id=='6685']
id_train <- clean6 %>% select(id)
train_max <- data.frame(predict(model7_max, type = "raw"))
prueba <-c(id_train,train_max)
data.type(prueba)
type(prueba)
typeof(prueba)
names(train_max) <- "train_max"
prueba <-c(id_train,train_max)
prueba <-cbind(id_train,train_max)
prueba[prueba$id=='6685']
prueba[prueba$id==6685]
prueba <-cbind(id_train,train_max)
prueba
prueba[id==6685]
prueba[prueba$id==6685,]
train_max <- data.frame(predict(model7_max, type = "raw"))
names(train_max) <- "train_max"
prueba <-cbind(id_train,train_max)
train_max2 <- data.frame(predict(model1_max, type = "raw"))
names(train_max2) <- "train_max"
prueba2 <-cbind(id_train,train_max2)
train_max3 <- data.frame(predict(model2_max, type = "raw"))
names(train_max3) <- "train_max"
prueba3 <-cbind(id_train,train_max3)
train_max4 <- data.frame(predict(model3_max, type = "raw"))
names(train_max4) <- "train_max"
prueba4 <-cbind(id_train,train_max4)
train_max5 <- data.frame(predict(model4_max, type = "raw"))
names(train_max5) <- "train_max"
prueba5 <-cbind(id_train,train_max5)
train_max6 <- data.frame(predict(model5_max, type = "raw"))
names(train_max6) <- "train_max"
prueba6 <-cbind(id_train,train_max6)
train_max7 <- data.frame(predict(model6_max, type = "raw"))
names(train_max7) <- "train_max"
prueba7 <-cbind(id_train,train_max7)
train_max8 <- data.frame(predict(model8_max, type = "raw"))
names(train_max8) <- "train_max"
prueba8 <-cbind(id_train,train_max8)
prueba[prueba$id==6685,]
prueba2[prueba2$id==6685,]
prueba3[prueba3$id==6685,]
prueba4[prueba4$id==6685,]
prueba5[prueba5$id==6685,]
prueba6[prueba6$id==6685,]
prueba7[prueba7$id==6685,]
prueba8[prueba8$id==6685,]
set.seed(123) #For reproducibility
#model_list_max <- caretList(max_price~., data=maxPrice_Clean_Training, trControl=train.control, methodList=c("parRF", "gbm", "glmnet"))
model_list_max <- caretList(max_price~., data=maxPrice_Clean_Training, trControl=train.control, methodList=c("parRF", "xgbTree"))
#set.seed(123) #For reproducibility
#model_list_min <- caretList(min_price~., data=minPrice_Clean_Training, trControl=train.control, methodList=c("parRF", "gbm", "glmnet"))
set.seed(123) #For reproducibility
#model_list_min2 <- caretList(min_price~., data=minPrice_Clean_Training2, trControl=train.control, methodList=c("parRF", "gbm", "glmnet"))
model_list_min2 <- caretList(min_price~., data=minPrice_Clean_Training2, trControl=train.control, methodList=c("parRF", "xgbTree"))
xyplot(resamples(model_list_max), models = c("parRF", "xgbTree"), metric = "MAE")
#xyplot(resamples(model_list_max), models = c("parRF", "glmnet"), metric = "MAE")
#xyplot(resamples(model_list_max), models = c("gbm", "glmnet"), metric = "MAE")
xyplot(resamples(model_list_min2), models = c("parRF", "xgbTree"), metric = "MAE")
#xyplot(resamples(model_list_min), models = c("parRF", "glmnet"), metric = "MAE")
#xyplot(resamples(model_list_min), models = c("gbm", "glmnet"), metric = "MAE")
modelCor(resamples(model_list_max))
#modelCor(resamples(model_list_min))
modelCor(resamples(model_list_min2))
gbm_ensemble_max <- caretStack(model_list_max, method="gbm", metric="MAE", trControl=train.control)
gbm_ensemble_min <- caretStack(model_list_min2, method="gbm", metric="MAE", trControl=train.control)
# --- GBM Ensemble mean max (parRF, xgbTree)-------------------
bothmodels <- list(gbm_ensemble_min,gbm_ensemble_max)
pred4 <- data.frame(predict(bothmodels, Price_Test_max, type = "raw"))
names(pred4) <- c("MIN", "MAX")
results5 <- cbind(id_test, pred4)
results5
write.csv(results5, file = "Model 20 (GBM ensemble (PRF and xgbTree) mean max).csv", row.names = F)
library(plyr)
library(tidyverse)
library(naniar)
library(VIM)
library(DMwR)
library(caret)
library(PerformanceAnalytics)
library(caretEnsemble)
modelCor(resamples(model_list_max))
#modelCor(resamples(model_list_min))
modelCor(resamples(model_list_min2))
prueba[prueba$id==6685,]
prueba2[prueba2$id==6685,]
prueba3[prueba3$id==6685,]
prueba4[prueba4$id==6685,]
prueba5[prueba5$id==6685,]
prueba6[prueba6$id==6685,]
prueba7[prueba7$id==6685,]
prueba8[prueba8$id==6685,]
predic_weighted_ave <- (train_max*3/6)+(train_max5*1/6)+(train_max8*1/6)+(train_max7*1/6)
predic_weighted_ave
##### Train the model 8 Stochastic Gradient Boosting # warning for some brands (few observations)
model8_min <- train(min_price ~ . , data = minPrice_Clean_Training2,
method = "gbm", verbose = FALSE, trControl = train.control, metric = "MAE")
##### Train the model 6 eXtreme Gradient Boosting
model6_min <- train(min_price ~ . , data = minPrice_Clean_Training2,
method = "xgbTree", trControl = train.control, metric = "MAE")
train_min <- data.frame(predict(model9_min, type = "raw"))
names(train_min) <- "train_min"
train_min5 <- data.frame(predict(model4_min, type = "raw"))
names(train_min5) <- "train_min"
train_min7 <- data.frame(predict(model6_min, type = "raw"))
names(train_min7) <- "train_min"
train_min8 <- data.frame(predict(model8_min, type = "raw"))
names(train_min8) <- "train_min"
predic_weighted_ave_max <- (train_max*3/6)+(train_max5*1/6)+(train_max8*1/6)+(train_max7*1/6)
predic_weighted_ave_min <- (train_min*3/6)+(train_min5*1/6)+(train_min8*1/6)+(train_min7*1/6)
mean(abs(actual_max_price$max_price-predic_weighted_ave_max$train_max))+ mean(abs(actual_min_price$min_price-predic_weighted_ave_min$train_min))
actual_max_price <- maxPrice_Clean_Training %>% select(max_price)
actual_min_price <- minPrice_Clean_Training %>% select(min_price)
predic_weighted_ave_max <- (train_max*3/6)+(train_max5*1/6)+(train_max8*1/6)+(train_max7*1/6)
predic_weighted_ave_min <- (train_min*3/6)+(train_min5*1/6)+(train_min8*1/6)+(train_min7*1/6)
mean(abs(actual_max_price$max_price-predic_weighted_ave_max$train_max))+ mean(abs(actual_min_price$min_price-predic_weighted_ave_min$train_min))
pred_min_model7 <- data.frame(predict(model9_min, Price_Test_max, type = "raw"))
pred_min_model8 <- data.frame(predict(model8_min, Price_Test_max, type = "raw"))
pred_min_model6 <- data.frame(predict(model6_min, Price_Test_max, type = "raw"))
pred_min_model4 <- data.frame(predict(model4_min, Price_Test_max, type = "raw"))
pred_max_model7 <- data.frame(predict(model7_max, Price_Test_max, type = "raw"))
pred_max_model8 <- data.frame(predict(model8_max, Price_Test_max, type = "raw"))
pred_max_model6 <- data.frame(predict(model6_max, Price_Test_max, type = "raw"))
pred_max_model4 <- data.frame(predict(model4_max, Price_Test_max, type = "raw"))
predicTest_weighted_ave_min <- (pred_min_model7*3/6)+(pred_min_model8*1/6)+(pred_min_model6*1/6)+(pred_min_model4*1/6)
predicTest_weighted_ave_max <- (pred_max_model7*3/6)+(pred_max_model8*1/6)+(pred_max_model6*1/6)+(pred_max_model4*1/6)
NormTest_prev <- clean_test3 %>% select(brand_mean_min,base_name_mean_min,touchscreen,screen_surface,screen_size,weight,ram,storage,ssd,resolution_mean_min,discrete_gpu,gpu_mean_min,cpu_mean_min,display_mean_min,x360,os)
Price_NormTest <- predict(preProcValues, NormTest_prev)
glimpse(Price_NormTest)
View(maxPrice_Clean_Training)
View(NormTest_prev)
index_Response <- match(c("max_price"), names(maxPrice_Clean_Training))
preProcValues <- preProcess(maxPrice_Clean_Training[-index_Response], method = "range")
NormTest_prev <- clean_test3 %>% select(brand_mean_min,base_name_mean_min,touchscreen,screen_surface,screen_size,weight,ram,storage,ssd,resolution_mean_min,discrete_gpu,gpu_mean_min,cpu_mean_min,display_mean_min,x360,os)
Price_NormTest <- predict(preProcValues, NormTest_prev)
glimpse(Price_NormTest)
index_Response <- match(c("max_price"), names(maxPrice_Clean_Training))
preProcValues <- preProcess(maxPrice_Clean_Training[-index_Response], method = "range")
NormTest_prev <- clean_test3 %>% select(brand_mean_max,base_name_mean_max,touchscreen,screen_surface,screen_size,weight,ram,storage,ssd,resolution_mean_max,discrete_gpu,gpu_mean_max,cpu_mean_max,display_mean_max,x360,os)
Price_NormTest <- predict(preProcValues, NormTest_prev)
glimpse(Price_NormTest)
pred_min_model7 <- data.frame(predict(model9_min, Price_Test_max, type = "raw"))
pred_min_model8 <- data.frame(predict(model8_min, Price_Test_max, type = "raw"))
pred_min_model6 <- data.frame(predict(model6_min, Price_Test_max, type = "raw"))
pred_min_model4 <- data.frame(predict(model4_min, Price_NormTest, type = "raw"))
pred_max_model7 <- data.frame(predict(model7_max, Price_Test_max, type = "raw"))
pred_max_model8 <- data.frame(predict(model8_max, Price_Test_max, type = "raw"))
pred_max_model6 <- data.frame(predict(model6_max, Price_Test_max, type = "raw"))
pred_max_model4 <- data.frame(predict(model4_max, Price_NormTest, type = "raw"))
predicTest_weighted_ave_min <- (pred_min_model7*3/6)+(pred_min_model8*1/6)+(pred_min_model6*1/6)+(pred_min_model4*1/6)
predicTest_weighted_ave_max <- (pred_max_model7*3/6)+(pred_max_model8*1/6)+(pred_max_model6*1/6)+(pred_max_model4*1/6)
index_Response <- match(c("max_price"), names(maxPrice_Clean_Training))
preProcValues <- preProcess(maxPrice_Clean_Training[-index_Response], method = "range")
#
trainScaled <- predict(preProcValues, maxPrice_Clean_Training)
minPrice_Norm_Training <- trainScaled %>%
select(brand_mean_max,base_name_mean_max,touchscreen,screen_surface,screen_size,weight,ram,storage,ssd,resolution_mean_max,discrete_gpu,gpu_mean_max,cpu_mean_max,display_mean_max,x360,os, min_price)
#  min
trainScaled2 <- predict(preProcValues, minPrice_Clean_Training2)
#  glimpse(trainScaled)
#
#
#
# # Selecting only the features to use for Normalized data
#  maxPrice_Norm_Training <- trainScaled %>%
#    select(brand_mean_max,base_name_mean_max,touchscreen,screen_surface,screen_size,weight,ram,storage,ssd,resolution_mean_max,discrete_gpu,gpu_mean_max,cpu_mean_max,display_mean_max,x360,os, max_price)
#  maxPrice_Norm_Training_fact <- data.frame(model.matrix(~., data=maxPrice_Norm_Training))
#
minPrice_Norm_Training <- trainScaled2 %>%
select(brand_mean_max,base_name_mean_max,touchscreen,screen_surface,screen_size,weight,ram,storage,ssd,resolution_mean_max,discrete_gpu,gpu_mean_max,cpu_mean_max,display_mean_max,x360,os, min_price)
#  minPrice_Norm_Training_fact <- data.frame(model.matrix(~., data=minPrice_Norm_Training))
maxPrice_Norm_Training <- trainScaled %>%
select(brand_mean_max,base_name_mean_max,touchscreen,screen_surface,screen_size,weight,ram,storage,ssd,resolution_mean_max,discrete_gpu,gpu_mean_max,cpu_mean_max,display_mean_max,x360,os, max_price)
#  maxPrice_N
model4_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glmnet", trControl = train.control, metric = "MAE")
model4_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "glmnet", trControl = train.control, metric = "MAE")
train_min <- data.frame(predict(model9_min, type = "raw"))
names(train_min) <- "train_min"
train_min5 <- data.frame(predict(model4_min, type = "raw"))
names(train_min5) <- "train_min"
train_min7 <- data.frame(predict(model6_min, type = "raw"))
names(train_min7) <- "train_min"
train_min8 <- data.frame(predict(model8_min, type = "raw"))
names(train_min8) <- "train_min"
predic_weighted_ave_max <- (train_max*3/6)+(train_max5*1/6)+(train_max8*1/6)+(train_max7*1/6)
predic_weighted_ave_min <- (train_min*3/6)+(train_min5*1/6)+(train_min8*1/6)+(train_min7*1/6)
mean(abs(actual_max_price$max_price-predic_weighted_ave_max$train_max))+ mean(abs(actual_min_price$min_price-predic_weighted_ave_min$train_min))
pred_min_model7 <- data.frame(predict(model9_min, Price_Test_max, type = "raw"))
pred_min_model8 <- data.frame(predict(model8_min, Price_Test_max, type = "raw"))
pred_min_model6 <- data.frame(predict(model6_min, Price_Test_max, type = "raw"))
pred_min_model4 <- data.frame(predict(model4_min, Price_NormTest, type = "raw"))
pred_max_model7 <- data.frame(predict(model7_max, Price_Test_max, type = "raw"))
pred_max_model8 <- data.frame(predict(model8_max, Price_Test_max, type = "raw"))
pred_max_model6 <- data.frame(predict(model6_max, Price_Test_max, type = "raw"))
pred_max_model4 <- data.frame(predict(model4_max, Price_NormTest, type = "raw"))
predicTest_weighted_ave_min <- (pred_min_model7*3/6)+(pred_min_model8*1/6)+(pred_min_model6*1/6)+(pred_min_model4*1/6)
predicTest_weighted_ave_max <- (pred_max_model7*3/6)+(pred_max_model8*1/6)+(pred_max_model6*1/6)+(pred_max_model4*1/6)
predicTest_weighted_ave_min
names(predicTest_weighted_ave_min) <- "MIN"
names(predicTest_weighted_ave_max) <- "MIN"
results7 <- cbind(id_test, predicTest_weighted_ave_min, predicTest_weighted_ave_max)
results7
results7 <- cbind(id_test, predicTest_weighted_ave_min, predicTest_weighted_ave_max)
results7
write.csv(results7, file = "Model 21 (weighted ensemble mean_max).csv", row.names = F)
predicTest_weighted_ave_min <- (pred_min_model7*3/5)+(pred_min_model8*1/5)+(pred_min_model6*1/5)
predicTest_weighted_ave_max <- (pred_max_model7*3/5)+(pred_max_model8*1/5)+(pred_max_model6*1/5)
names(predicTest_weighted_ave_min) <- "MIN"
names(predicTest_weighted_ave_max) <- "MIN"
results7 <- cbind(id_test, predicTest_weighted_ave_min, predicTest_weighted_ave_max)
results7
write.csv(results7, file = "Model 21 (weighted ensemble mean_max (parRF GBM and EGB)).csv", row.names = F)
predicTest_weighted_ave_min <- (pred_min_model7*3/5)+(pred_min_model8*1/5)+(pred_min_model6*1/5)
predicTest_weighted_ave_max <- (pred_max_model7*3/5)+(pred_max_model8*1/5)+(pred_max_model6*1/5)
names(predicTest_weighted_ave_min) <- "MIN"
names(predicTest_weighted_ave_max) <- "MIN"
results7 <- cbind(id_test, predicTest_weighted_ave_min, predicTest_weighted_ave_max)
results7
write.csv(results7, file = "Model 22 (weighted ensemble mean_max (parRF GBM and EGB)).csv", row.names = F)
predicTest_weighted_ave_min <- (pred_min_model7*3/4)+(pred_min_model6*1/4)
predicTest_weighted_ave_max <- (pred_max_model7*3/4)+(pred_max_model6*1/4)
names(predicTest_weighted_ave_min) <- "MIN"
names(predicTest_weighted_ave_max) <- "MIN"
results7 <- cbind(id_test, predicTest_weighted_ave_min, predicTest_weighted_ave_max)
results7
write.csv(results7, file = "Model 23 (weighted ensemble mean_max (parRF and EGB)).csv", row.names = F)
predicTest_weighted_ave_min <- (pred_min_model7*3/4)+(pred_min_model8*1/4)
predicTest_weighted_ave_max <- (pred_max_model7*3/4)+(pred_max_model8*1/4)
names(predicTest_weighted_ave_min) <- "MIN"
names(predicTest_weighted_ave_max) <- "MIN"
results7 <- cbind(id_test, predicTest_weighted_ave_min, predicTest_weighted_ave_max)
results7
write.csv(results7, file = "Model 24 (weighted ensemble mean_max (parRF and GBM)).csv", row.names = F)
predicTest_weighted_ave_min <- (pred_min_model7*3/4)+(pred_min_model6*1/4)
predicTest_weighted_ave_max <- (pred_max_model7*3/4)+(pred_max_model6*1/4)
names(predicTest_weighted_ave_min) <- "MIN"
names(predicTest_weighted_ave_max) <- "MIN"
results7 <- cbind(id_test, predicTest_weighted_ave_min, predicTest_weighted_ave_max)
results7
library(plyr)
library(tidyverse)
library(naniar)
library(VIM)
library(DMwR)
library(caret)
library(PerformanceAnalytics)
library(caretEnsemble)
#--------Load Data-------------------------------------------
train_df <- read.csv("https://raw.githubusercontent.com/behnouri/lprice-prediction/master/train.csv", na.strings = c("", "NA"))
test_df <- read.csv("https://raw.githubusercontent.com/behnouri/lprice-prediction/master/test.csv", na.strings=c("NA",""))
#--------Load CPU and GPU Data-----------------------------------------
gpu_df <- read.csv("https://raw.githubusercontent.com/behnouri/lprice-prediction/master/GPU_Benchmark.csv", na.strings = c("", "NA"))
cpu_df <- read.csv("https://raw.githubusercontent.com/behnouri/lprice-prediction/master/CPU_Benchmark.csv", na.strings = c("", "NA"))
colnames(cpu_df)[1] <- "cpu_model"
colnames(cpu_df)[2] <- "cpu_benchmark_score"
colnames(gpu_df)[1] <- "gpu_model"
colnames(gpu_df)[2] <- "gpu_benchmark_score"
new.cpu <- data.frame(cpu_model = c("Intel Pentium Gold 4415Y", "Intel Pentium Gold 4417U"),
cpu_benchmark_score = c(3800, 3900))
cpu_df <- rbind(cpu_df, new.cpu)
cpu_df <- cpu_df[!is.na(cpu_df$cpu_benchmark_score),]
boxplot(cpu_df$cpu_benchmark_score)
train_df <- read.csv("https://raw.githubusercontent.com/behnouri/lprice-prediction/master/train.csv", na.strings = c("", "NA"))
test_df <- read.csv("https://raw.githubusercontent.com/behnouri/lprice-prediction/master/test.csv", na.strings=c("NA",""))
#--------Load CPU and GPU Data-----------------------------------------
gpu_df <- read.csv("https://raw.githubusercontent.com/behnouri/lprice-prediction/master/GPU_Benchmark.csv", na.strings = c("", "NA"))
cpu_df <- read.csv("https://raw.githubusercontent.com/behnouri/lprice-prediction/master/CPU_Benchmark.csv", na.strings = c("", "NA"))
colnames(cpu_df)[1] <- "cpu_model"
colnames(cpu_df)[2] <- "cpu_benchmark_score"
colnames(gpu_df)[1] <- "gpu_model"
colnames(gpu_df)[2] <- "gpu_benchmark_score"
new.cpu <- data.frame(cpu_model = c("Intel Pentium Gold 4415Y", "Intel Pentium Gold 4417U"),
cpu_benchmark_score = c(3800, 3900))
cpu_df <- rbind(cpu_df, new.cpu)
cpu_df <- cpu_df[!is.na(cpu_df$cpu_benchmark_score),]
gpu_df <- gpu_df[!is.na(gpu_df$gpu_benchmark_score),]
train_df
gg_miss_var(clean2)
gg_miss_case(clean2)
###############################Prepare Train Data#############################################
colnames(train_df)[12] <- "dkeyboard"
colnames(train_df)[1] <- "id"
##--------------------NA Values for TRAIN DATA------------------------------------
##--------------------Remove Rows with more than 4 nulls--------------------------
rown_four_nulls <- as.integer(rownames(train_df[rowSums(is.na(train_df[])) == 4,]))
clean2 <- train_df[-c(rown_four_nulls),]
gg_miss_var(clean2)
gg_miss_case(clean2
gg_miss_case(clean2)
gg_miss_case(clean2)
View(clean2)
aggr(x = clean2[,8:20])
clean3_knn <- knnImputation(clean2)
aggr(x=clean3_knn)
##-----------------Screen Surface for TRAIN DATA----------------------------------------------------
clean3_knn$screen_surface <- tolower(clean3_knn$screen_surface)
##----------------Screen Resolution for TRAIN DATA--------------------------------------------
clean4 <- clean3_knn %>%
mutate(resolution = NA)
clean4 <- clean4 %>%
mutate(resolution= ifelse(pixels_x==1366 & pixels_y==768,"HD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==1600 & pixels_y==900,"HD+",resolution)) %>%
mutate(resolution= ifelse(pixels_x==1920 & pixels_y==1080,"FHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2304 & pixels_y==1440,"Retina",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2560 & pixels_y==1440,"QHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2560 & pixels_y==1600,"Retina",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2880 & pixels_y==1800,"Retina",resolution)) %>%
mutate(resolution= ifelse(pixels_x==3000 & pixels_y==2000,"PixelSense",resolution)) %>%
mutate(resolution= ifelse(pixels_x==3200 & pixels_y==1800,"QHD+",resolution)) %>%
mutate(resolution= ifelse(pixels_x==3840 & pixels_y==2160,"UHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==1920 & pixels_y==1280,"FHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2160 & pixels_y==1440,"FHD+",resolution)) %>%
mutate(resolution= ifelse(pixels_x==1280 & pixels_y==800,"HD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==1920 & pixels_y==1280,"FHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2400 & pixels_y==1600,"QHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2736 & pixels_y==1824,"UHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==3072 & pixels_y==1920,"Retina",resolution)) %>%
mutate(resolution= ifelse(pixels_x==1920 & pixels_y==1200,"FHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2256 & pixels_y==1504,"PixelSense",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2736 & pixels_y==1824,"PixelSense",resolution)) %>%
mutate(resolution= ifelse(pixels_x==1440 & pixels_y==900,"airhd",resolution)) %>%
mutate(resolution= ifelse(pixels_x==3240 & pixels_y==2160,"PixelSense",resolution))
resolution_tmax <- clean4 %>%
mutate(price=max_price) %>%
group_by(resolution) %>%
summarise(resolution_mean_max = mean(price))
clean4 <- left_join(clean4,resolution_tmax)
resolution_tmin <- clean4 %>%
group_by(resolution) %>%
summarise(resolution_mean_min = mean(min_price))
clean4 <- left_join(clean4,resolution_tmin)
##------------------Screen Size for TRAIN DATA---------------------------------------------------
clean4 <- clean4 %>%
mutate(screen_size_fact= ifelse(screen_size>=10 & screen_size<=10.7,10,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=10.8 & screen_size<=11.7,11,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=11.8 & screen_size<=12.6,12,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=12.7 & screen_size<=13.6,13,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=13.7 & screen_size<=14.6,14,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=13.7 & screen_size<=14.6,14,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=14.7 & screen_size<=15.6,15,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=15.7 & screen_size<=16.6,16,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=16.7 & screen_size<=17.6,17,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=17.7 & screen_size<=18.6,18,screen_size))
##---------------------Display Type---------------------------------------------
clean4$name <- tolower(clean4$name)
clean4 <- clean4 %>%
mutate(display_type= "other") %>%
mutate(display_type= ifelse(grepl("lcd",name),"lcd",display_type)) %>%
mutate(display_type= ifelse(grepl("oled",name),"oled",display_type)) %>%
mutate(display_type= ifelse(grepl("ips",name),"ips",display_type)) %>%
mutate(display_type= ifelse(brand=="Apple" & resolution=="Retina","ips",display_type)) %>%
mutate(display_type= ifelse(brand=="Apple" & (resolution=="HD"|resolution=="airhd"),"other",display_type)) %>%
mutate(display_type= ifelse(grepl("Microsoft Surface",base_name),"ips",display_type))
display_tmax <- clean4 %>%
mutate(price=max_price) %>%
group_by(display_type) %>%
summarise(display_mean_max = mean(price))
clean4 <- left_join(clean4,display_tmax)
display_tmin <- clean4 %>%
group_by(display_type) %>%
summarise(display_mean_min = mean(min_price))
clean4 <- left_join(clean4,display_tmin)
##---------------------Brand Train Data-----------------------------------------
clean4$brand <- as.character(clean4$brand)
clean4 <- clean4 %>%
mutate(brand_clean= brand) %>%
mutate(brand_clean= ifelse(grepl("Eluktronics",base_name),"eluktronics",brand_clean)) %>%
mutate(brand_clean= ifelse(grepl("Sager",base_name),"sager",brand_clean)) %>%
mutate(brand_clean= ifelse(grepl("Prostar",base_name),"prostar",brand_clean)) %>%
mutate(brand_clean= ifelse(grepl("Jumper",brand),"Other",brand_clean)) %>%
mutate(brand_clean= ifelse(grepl("RCA",brand),"Other",brand_clean)) %>%
mutate(brand_clean= ifelse(grepl("Toshiba",brand),"Other",brand_clean))
brand_tmax <- clean4 %>%
mutate(price=max_price) %>%
group_by(brand_clean) %>%
summarise(brand_mean_max = mean(price))
clean4 <- left_join(clean4,brand_tmax)
brand_tmin <- clean4 %>%
group_by(brand_clean) %>%
summarise(brand_mean_min = mean(min_price))
clean4 <- left_join(clean4,brand_tmin)
# library(rpart)
# fit <- rpart(max_price~brand_mean,
#              method="MAE",data=clean4)
#
# printcp(fit) # display the results
# plotcp(fit) # visualize cross-validation results
# summary(fit) # detailed summary of splits
# par(mfrow=c(1,2)) # two plots on one page
# rsq.rpart(fit) # visualize cross-validation results
#
# plot(fit, uniform=TRUE,
#      main="Regression Tree for Mileage ")
# text(fit, use.n=TRUE, all=TRUE, cex=.8)
#
# clean4 <- clean4 %>%
#   mutate(brand_mean= ifelse(brand_mean <=620,300,brand_mean)) %>%
#   mutate(brand_mean= ifelse(brand_mean <=450 & brand_mean >300,400,brand_mean)) %>%
#   mutate(brand_mean= ifelse(brand_mean <=620 & brand_mean >450,600,brand_mean)) %>%
#   mutate(brand_mean= ifelse(brand_mean <=900 & brand_mean >650,750,brand_mean)) %>%
#   mutate(brand_mean= ifelse(brand_mean <=1200 & brand_mean >900,950,brand_mean)) %>%
#   mutate(brand_mean= ifelse(brand_mean <=1400 & brand_mean >1200,1300,brand_mean)) %>%
#   mutate(brand_mean= ifelse(brand_mean <=1600 & brand_mean >1400,1500,brand_mean)) %>%
#   mutate(brand_mean= ifelse(brand_mean >2000,2000,brand_mean))
##---------------------CPU Scores-----------------------------------------------
clean4<-clean4 %>%
mutate(cpu_details,cpu_clean= gsub("\\s*(\\d[.]\\d*)\\s*(GHz|ghz|Ghz|Ghz|gHz).*","",clean4$cpu_details))
cpu_df<-cpu_df %>%
mutate(cpu_model,cpu_clean= gsub("\\s*([@]).*|\\s*(APU).*","",cpu_df$cpu_model))
clean5 <- clean4 %>%
left_join(cpu_df,by="cpu_clean")
View(clean5)
View(gpu_df)
View(cpu_df)
